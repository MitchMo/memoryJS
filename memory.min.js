if(void 0===window){console.log("You are running under NodeJS");var window={name:"Dummy Window Object Fallback for NodeJS",isReal:!1}}class Pointer{constructor(n="0",e=!1){var i=n,t=e;this.isLocal=function(){return t},this.value=function(){return i}}pointedTo(n){return this.isLocal()?n.valueOf(this.value()):window.publicMemoryObj.valueOf(this.value())}changeValue(n,e){return this.isLocal()?e.changeValue(this.value(),n):window.publicMemoryObj.changeValue(this.value(),n),0}free(n){return this.isLocal()?n.free(this.value()):window.publicMemoryObj.free(),null}set point(n){if(this.isLocal())throw new Error("Pointer.point shorthand is only applicable for global pointers. Use changeValue() function instead");this.changeValue(n)}get point(){if(this.isLocal())throw new Error("Pointer.point shorthand is only applicable for global pointers. Use pointedTo() function instead");return this.pointedTo()}}class Memory{constructor(n=!1){var e=0,i=[];this.newobj=function(t){return i.push(t),e+=1,n?new Pointer((e-1).toString(36)):new Pointer((e-1).toString(36),!0)},this.valueOf=function(n="0"){return i[parseInt(n,36)]},this.changeValue=function(n,e){return i[parseInt(n,36)]=e,0},this.free=function(n="0"){return i[parseInt(n,36)]=null,0},this.nullptr=this.newobj(null)}}window.publicMemoryObj=new Memory(!0);
